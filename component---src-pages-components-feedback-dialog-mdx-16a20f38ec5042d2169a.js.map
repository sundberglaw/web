{"version":3,"sources":["webpack:///./src/pages/components/FeedbackDialog.mdx"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAEeA,EAFTC,EAAe,GAOtBC,GALgBF,EAKgB,kBALR,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,KAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,YAACT,EAAD,CAAiBS,QAAQ,mBACvB,4BAAW,0BAAYC,WAAW,KAAvB,oBAAX,4HAEF,+CACA,0FAAyE,0BAAYA,WAAW,KAAvB,YAAzE,kDAAgL,0BAAYA,WAAW,KAAvB,kBAAhL,eACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,sCAA0D,0BAAYA,WAAW,KAAvB,uEAA1D,uDAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,mDAGJ,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kXAgBL,4CACA,qJAAoI,mBAAGA,WAAW,KAAQ,CACtJ,KAAQ,iCADwH,eAApI,qCAGwB,mBAAGA,WAAW,KAAQ,CAC1C,KAAQ,2FADY,QAHxB,KAMA,wGAAuF,0BAAYA,WAAW,KAAvB,YAAvF,gGACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,yCACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,yBACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,wDAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6PAgBTH,EAAWI,gBAAiB","file":"component---src-pages-components-feedback-dialog-mdx-16a20f38ec5042d2169a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/sundberglaw/web/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The `}<inlineCode parentName=\"p\">{`<FeedbackDialog>`}</inlineCode>{` component is a modeless dialog that allows your users to provide low-friction, anonymous feedback for a specific page.`}</p>\n    </PageDescription>\n    <h2>{`Activating the dialog`}</h2>\n    <p>{`The Feedback button only becomes visisble once you’ve supplied an `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` handler. To do that, we’ll need to shadow the `}<inlineCode parentName=\"p\">{`FeedbackDialog`}</inlineCode>{` component.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a new javascript file under `}<inlineCode parentName=\"p\">{`src/gatsby-theme-carbon/components/FeedbackDialog/FeedbackDialog.js`}</inlineCode>{`. Matching the filepath exactly is important here.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Copy the following snippet into your new file`}</p>\n      </li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`  import React from 'react';\n  import ThemeFeedbackDialog from 'gatsby-theme-carbon/src/components/FeedbackDialog/FeedbackDialog';\n\n  const FeedbackDialog = ({ props }) => {\n    const onSubmit = data => {\n      console.log({ ...data });\n    };\n\n    return <ThemeFeedbackDialog {...props} onSubmit={onSubmit} />;\n  };\n\n  export default FeedbackDialog;\n\n`}</code></pre>\n    <h2>{`Creating a handler`}</h2>\n    <p>{`Next, you’ll need a place to send the data. For the Carbon website, we use a serverless function that forwards the data to a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.surveygizmo.com/\"\n      }}>{`SurveyGizmo`}</a>{` quiz.\nYou can see that function `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/carbon-design-system/carbon-website/blob/master/functions/survey.js\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`The handler can send a fetch request off to the endpoint you create. Update the `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` handler to send the data wherever you want. This function receives the following arguments:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`experience`}</inlineCode>{`: “Negative”, “Positive” or “Neutral”`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`comment`}</inlineCode>{`: An optional comment`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`path`}</inlineCode>{`: the window location when the survey was submitted`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const FeedbackDialog = ({ props }) => {\n  const onSubmit = data => {\n    fetch(process.env.API_ENDPOINT, {\n      method: 'POST',\n      body: JSON.stringify(data),\n  });\n\n  return <ThemeFeedbackDialog {...props} onSubmit={onSubmit} />;\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}